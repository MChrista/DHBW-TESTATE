package algorithms;

import objects.Matrix;

public class BresenhamCircle {

	public void drawCircle(int radius) {
		int distance = 3 - (2 * radius);
		int x = 0;
		int y = radius;
		setPoint(x, y);

		while (x < y) {
			if (distance < 0) {
				distance = distance + 4 * x + 6;
				if (distance > 0) {
					y--;
				}
			} else {
				distance = distance + 4 * (x - y) + 10;
				if (distance > 0) {
					y--;
				}
			}
			x++;
			setPoint(x, y);

		}
	}

	private void setPoint(int x, int y) {
		int xOffset = (Matrix.getWidth() / 2);
		int yOffset = (Matrix.getHeight() / 2);
		if ((x + xOffset) <= Matrix.getWidth() && (yOffset + y) <= Matrix.getHeight() && (x + xOffset) >= 0
				&& (yOffset + y) >= 0) {
			Matrix.setPoint(x + xOffset, yOffset + y);
			Matrix.setPoint(yOffset + y, x + xOffset);
		}
		if (-x + xOffset <= Matrix.getWidth() && yOffset + y <= Matrix.getHeight() && -x + xOffset >= 0
				&& yOffset + y >= 0) {
			Matrix.setPoint(-x + xOffset, yOffset + y);
			Matrix.setPoint(yOffset + y, -x + xOffset);
		}
		if (x + xOffset <= Matrix.getWidth() && yOffset - y <= Matrix.getHeight() && x + xOffset >= 0
				&& yOffset - y >= 0) {
			Matrix.setPoint(x + xOffset, yOffset - y);
			Matrix.setPoint(yOffset - y, x + xOffset);
		}
		if (-x + xOffset <= Matrix.getWidth() && yOffset - y <= Matrix.getHeight() && -x + xOffset >= 0
				&& yOffset - y >= 0) {
			Matrix.setPoint(-x + xOffset, yOffset - y);
			Matrix.setPoint(yOffset - y, -x + xOffset);
		}

	}

}